dXNlIHN0ZDo6ewogICAgY29sbGVjdGlvbnM6Okhhc2hNYXAsCiAgICBjb252ZXJ0OjpJbmZhbGxpYmxlLAogICAgbmV0OjpTb2NrZXRBZGRyLAogICAgcGF0aDo6UGF0aEJ1ZiwKICAgIHN5bmM6OkFyYywKICAgIHRpbWU6OntEdXJhdGlvbiwgU3lzdGVtVGltZX0sCn07Cgp1c2UgYW55aG93Ojp7Q29udGV4dCwgUmVzdWx0fTsKdXNlIGFzeW5jX3RyYWl0Ojphc3luY190cmFpdDsKdXNlIGF4dW06OnsKICAgIGJvZHk6OkJ5dGVzLAogICAgZXh0cmFjdDo6U3RhdGUsCiAgICBodHRwOjp7TWV0aG9kLCBTdGF0dXNDb2RlfSwKICAgIHJlc3BvbnNlOjpzc2U6OntFdmVudCwgS2VlcEFsaXZlfSwKICAgIHJlc3BvbnNlOjp7SnNvbiwgU3NlfSwKICAgIHJvdXRpbmc6OntnZXQsIHBvc3R9LAogICAgUm91dGVyLAp9Owp1c2UgZnV0dXJlc191dGlsOjpTdHJlYW1FeHQ7CnVzZSBtY3BfcHJvdG9jb2xfc2RrOjp7CiAgICBjb3JlOjp7ZXJyb3I6Ok1jcEVycm9yLCB0b29sOjpUb29sSGFuZGxlcn0sCiAgICBwcm90b2NvbDo6dHlwZXM6OnsKICAgICAgICBlcnJvcl9jb2RlcywgQ29udGVudCwgSnNvblJwY0Vycm9yLCBKc29uUnBjTWVzc2FnZSwgSnNvblJwY05vdGlmaWNhdGlvbiwgSnNvblJwY1JlcXVlc3QsCiAgICAgICAgUmVxdWVzdElkLCBUb29sUmVzdWx0LAogICAgfSwKICAgIHNlcnZlcjo6TWNwU2VydmVyLAp9Owp1c2Ugbml4Ojp1bmlzdGQ6OmdldHVpZDsKdXNlIHNlcmRlX2pzb246Ontqc29uLCBWYWx1ZX07CnVzZSB0b2tpbzo6ewogICAgcnVudGltZTo6QnVpbGRlciBhcyBUb2tpb1J1bnRpbWVCdWlsZGVyLAogICAgc2lnbmFsIGFzIHRva2lvX3NpZ25hbCwKICAgIHN5bmM6Onticm9hZGNhc3QsIE11dGV4fSwKICAgIHRhc2ssCn07CnVzZSB0b2tpb19zdHJlYW06OndyYXBwZXJzOjpCcm9hZGNhc3RTdHJlYW07CnVzZSB0b3dlcl9odHRwOjpjb3JzOjp7QW55LCBDb3JzTGF5ZXJ9OwoKdXNlIGNyYXRlOjpjb25maWc6OkNvbmZpZzsKdXNlIGNyYXRlOjp3b3JrZmxvdzo6cnVuX2R1bXBfd29ya2Zsb3c7CgojW2Rlcml2ZShDbG9uZSldCnN0cnVjdCBBcHBTdGF0ZSB7CiAgICBzZXJ2ZXI6IEFyYzxNdXRleDxNY3BTZXJ2ZXI+PiwKICAgIG5vdGlmaWVyOiBicm9hZGNhc3Q6OlNlbmRlcjxKc29uUnBjTm90aWZpY2F0aW9uPiwKfQoKZm4gYnVpbGRfcm91dGVyKHN0YXRlOiBBcHBTdGF0ZSkgLT4gUm91dGVyIHsKICAgIGxldCBjb3JzID0gQ29yc0xheWVyOjpuZXcoKQogICAgICAgIC5hbGxvd19vcmlnaW4oQW55KQogICAgICAgIC5hbGxvd19tZXRob2RzKFtNZXRob2Q6OlBPU1QsIE1ldGhvZDo6R0VULCBNZXRob2Q6Ok9QVElPTlNdKQogICAgICAgIC5hbGxvd19oZWFkZXJzKEFueSk7CgogICAgUm91dGVyOjpuZXcoKQogICAgICAgIC5yb3V0ZSgiL21jcCIsIHBvc3QoaGFuZGxlX21jcF9yZXF1ZXN0KS5vcHRpb25zKGhhbmRsZV9vcHRpb25zKSkKICAgICAgICAucm91dGUoIi9tY3Avbm90aWZ5IiwgcG9zdChoYW5kbGVfbm90aWZpY2F0aW9uKSkKICAgICAgICAucm91dGUoIi9tY3AvZXZlbnRzIiwgZ2V0KGhhbmRsZV9zc2VfZXZlbnRzKSkKICAgICAgICAucm91dGUoIi9oZWFsdGgiLCBnZXQoaGFuZGxlX2hlYWx0aCkpCiAgICAgICAgLndpdGhfc3RhdGUoc3RhdGUpCiAgICAgICAgLmxheWVyKGNvcnMpCn0KCnB1YiBmbiBydW5fbWNwX3NlcnZlcihiaW5kOiAmc3RyKSAtPiBSZXN1bHQ8KCk+IHsKICAgIGxldCBydW50aW1lID0gVG9raW9SdW50aW1lQnVpbGRlcjo6bmV3X211bHRpX3RocmVhZCgpCiAgICAgICAgLmVuYWJsZV9hbGwoKQogICAgICAgIC5idWlsZCgpCiAgICAgICAgLmNvbnRleHQoImNyZWF0ZSB0b2tpbyBydW50aW1lIik/OwogICAgcnVudGltZS5ibG9ja19vbihydW5fYXN5bmMoYmluZC50b19zdHJpbmcoKSkpCn0KCmFzeW5jIGZuIHJ1bl9hc3luYyhiaW5kOiBTdHJpbmcpIC0+IFJlc3VsdDwoKT4gewogICAgaWYgIWdldHVpZCgpLmlzX3Jvb3QoKSB7CiAgICAgICAgcHJpbnRsbiEoIltNQ1BdICBXYXJuaW5nOiBkcml6emxlRHVtcGVyIHNlcnZlciBpcyBub3QgcnVubmluZyBhcyByb290OyBkdW1wcyBtYXkgZmFpbC4iKTsKICAgIH0KCiAgICBsZXQgc2VydmVyID0gQXJjOjpuZXcoTXV0ZXg6Om5ldyhNY3BTZXJ2ZXI6Om5ldygKICAgICAgICAiZHJpenpsZS1kdW1wZXIiLnRvX3N0cmluZygpLAogICAgICAgIGVudiEoIkNBUkdPX1BLR19WRVJTSU9OIikudG9fc3RyaW5nKCksCiAgICApKSk7CgogICAgewogICAgICAgIGxldCBndWFyZCA9IHNlcnZlci5sb2NrKCkuYXdhaXQ7CiAgICAgICAgZ3VhcmQKICAgICAgICAgICAgLmFkZF90b29sKAogICAgICAgICAgICAgICAgImR1bXBfZGV4Ii50b19zdHJpbmcoKSwKICAgICAgICAgICAgICAgIFNvbWUoIkR1bXAgREVYL0NERVggcmVnaW9ucyBmb3IgYSBydW5uaW5nIHBhY2thZ2UiLnRvX3N0cmluZygpKSwKICAgICAgICAgICAgICAgIGpzb24hKHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAicGFja2FnZSI6IHsidHlwZSI6ICJzdHJpbmcifSwKICAgICAgICAgICAgICAgICAgICAgICAgIndhaXRfdGltZSI6IHsidHlwZSI6ICJudW1iZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgIm91dF9kaXIiOiB7InR5cGUiOiAic3RyaW5nIn0sCiAgICAgICAgICAgICAgICAgICAgICAgICJkdW1wX2FsbCI6IHsidHlwZSI6ICJib29sZWFuIn0sCiAgICAgICAgICAgICAgICAgICAgICAgICJmaXhfaGVhZGVyIjogeyJ0eXBlIjogImJvb2xlYW4ifSwKICAgICAgICAgICAgICAgICAgICAgICAgInNjYW5fc3RlcCI6IHsidHlwZSI6ICJpbnRlZ2VyIiwgIm1pbmltdW0iOiAxfSwKICAgICAgICAgICAgICAgICAgICAgICAgIm1pbl9zaXplIjogeyJ0eXBlIjogImludGVnZXIiLCAibWluaW11bSI6IDF9LAogICAgICAgICAgICAgICAgICAgICAgICAibWF4X3NpemUiOiB7InR5cGUiOiAiaW50ZWdlciIsICJtaW5pbXVtIjogMX0sCiAgICAgICAgICAgICAgICAgICAgICAgICJtaW5fZHVtcF9zaXplIjogeyJ0eXBlIjogImludGVnZXIiLCAibWluaW11bSI6IDF9LAogICAgICAgICAgICAgICAgICAgICAgICAic2lnbmFsX3RyaWdnZXIiOiB7InR5cGUiOiAiYm9vbGVhbiJ9LAogICAgICAgICAgICAgICAgICAgICAgICAid2F0Y2hfbWFwcyI6IHsidHlwZSI6ICJib29sZWFuIn0sCiAgICAgICAgICAgICAgICAgICAgICAgICJzdGFnZV90aHJlc2hvbGQiOiB7InR5cGUiOiAiaW50ZWdlciIsICJtaW5pbXVtIjogMX0sCiAgICAgICAgICAgICAgICAgICAgICAgICJtYXBfcGF0dGVybnMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAib25lT2YiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogInN0cmluZyJ9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJhcnJheSIsICJpdGVtcyI6IHsidHlwZSI6ICJzdHJpbmcifX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWyJwYWNrYWdlIl0sCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIER1bXBUb29sOjpkZWZhdWx0KCksCiAgICAgICAgICAgICkKICAgICAgICAgICAgLmF3YWl0CiAgICAgICAgICAgIC5jb250ZXh0KCJyZWdpc3RlciBkdW1wX2RleCB0b29sIik/OwogICAgfQoKICAgIGxldCAobm90aWZpZXIsIF8pID0gYnJvYWRjYXN0OjpjaGFubmVsKDI1Nik7CiAgICBsZXQgc3RhdGUgPSBBcHBTdGF0ZSB7CiAgICAgICAgc2VydmVyOiBzZXJ2ZXIgY2xvbmUoKSwKICAgICAgICBub3RpZmllcixKc29uUnBjTm90aWZpY2F0aW9uOjogbm90aWZpZXIsCiAgICB9OwoKICAgIGxldCBhcHAgPSBidWlsZF9yb3V0ZXIoc3RhdGUpOwoKICAgIGxldCBsaXN0ZW5lciA9IHRva2lvOjp...